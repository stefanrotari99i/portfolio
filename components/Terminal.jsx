"use client";
import { useEffect, useState } from "react";

const AVAILABLE_COMMANDS = [
    {
        command: "HELP",
        description: "Show available commands",
    },
    {
        command: "ABOUT",
        description: "Show information about me",
    },
    {
        command: "SKILLS",
        description: "Show my skills",
    },
    {
        command: "CONTACT",
        description: "Show my contact information",
    },
    {
        command: "CLEAR",
        description: "Clear the terminal",
    },
    {
        command: "EXIT",
        description: "Close the terminal",
    },
];

const ABOUT_ME = [
    "Hello, my name is Rotari Stefan and I am a full-stack web developer.",
    "I am a self-taught programmer and I have been programming for about 2 years.",
    "I am passionate about programming and I am always looking to learn new things.",
    "I am a very ambitious person and I always try to do my best.",
    "I am a very sociable person and I like to work in a team.",
    "I am a very responsible person and I always try to finish my work on time.",
    "I am a very organized person and I always try to keep my work organized.",
    "I am a very creative person and I always try to find new solutions to problems.",
    "I am a very patient person and I always try to understand the problems of others.",
    "I am a very determined person and I always try to achieve my goals.",
    "I am a very positive person and I always try to see the good in everything.",
];

const MY_SKILLS = [
    {
        title: "Frontend",
        skills: [
            "HTML",
            "CSS",
            "JavaScript",
            "React",
            "Next.js",
            "Tailwind CSS",
            "Bootstrap",
            "Material UI",
            "Styled Components",
            "Framer Motion",
            "React Spring",
            "React Router",
            "Redux",
            "React Redux",
            "Redux Toolkit",
            "Redux Thunk",
            "Redux Saga",
        ],
    },
    {
        title: "Backend",
        skills: [
            "Node.js",
            "Express.js",
            "MongoDB",
            "Mongoose",
            "MySQL",
            "Sequelize",
            "PostgreSQL",
        ],
    },
    {
        title: "Other",
        skills: [
            "Git",
            "GitHub",
            "GitLab",
            "Heroku",
            "Netlify",
            "Vercel",
            "Firebase",
            "Figma",
            "Adobe XD",
            "Adobe Photoshop",
            "Adobe Illustrator",
            "Adobe Premiere Pro",
            "Adobe After Effects",
            "Microsoft Office",
        ],
    },
];

const CONTACT_INFORMATION = [
    {
        title: "Email",
        value: "stefan.rotari99i@gmail.com",
    },
    {
        title: "Phone",
        value: "+373 78 888 888",
    },
    {
        title: "LinkedIn",
        value: "https://www.linkedin.com/in/rotari-stefan/",
    },
    {
        title: "GitHub",
        value: "https://gihub.com/rotari-stefan",
    },
    {
        title: "GitLab",
        value: "https://gitlab.com/rotari.stefan",
    },
    {
        title: "Facebook",
        value: "https://www.facebook.com/rotari.stefan",
    },
    {
        title: "Instagram",
        value: "https://www.instagram.com/rotari.stefan/",
    },
    {
        title: "Twitter",
        value: "https://twitter.com/rotari_stefan",
    },
];

const Terminal = () => {
    const [command, setCommand] = useState("");
    const [history, setHistory] = useState([]);
    const [historyIndex, setHistoryIndex] = useState(0);
    const [cursor, setCursor] = useState(0);

    const COMMANDS = {
        HELP: () => {
            return (
                <div className="flex flex-col w-full">
                    <div>If you want to know more about me, type:</div>
                    {AVAILABLE_COMMANDS.map((command, index) => (
                        <div key={index} className="flex flex-row w-full">
                            <p className="mr-2 w-1/6">
                                {command.command.toUpperCase()}
                            </p>
                            <p className="">
                                {command.description}
                            </p>
                        </div>
                    ))}
                </div>
            );
        },
        ABOUT: () => {
            return (
                <div className="flex flex-col w-full">
                    <p className="text-green-500 text-lg">
                        {/* ASCII text generated by http://patorjk.com/software/taag/
                        <pre>{`
█████╗ ██████╗  ██████╗ ██╗   ██╗████████╗    ███╗   ███╗███████╗    
██╔══██╗██╔══██╗██╔═══██╗██║   ██║╚══██╔══╝    ████╗ ████║██╔════╝    
███████║██████╔╝██║   ██║██║   ██║   ██║       ██╔████╔██║█████╗      
██╔══██║██╔══██╗██║   ██║██║   ██║   ██║       ██║╚██╔╝██║██╔══╝      
██║  ██║██████╔╝╚██████╔╝╚██████╔╝   ██║       ██║ ╚═╝ ██║███████╗    
╚═╝  ╚═╝╚═════╝  ╚═════╝  ╚═════╝    ╚═╝       ╚═╝     ╚═╝╚══════╝                                                                                          
                        `}</pre> */}
                    </p>
                    {ABOUT_ME.map((about, index) => (
                        <p key={index}>{about}</p>
                    ))}
                </div>
            );
        },

        SKILLS: () => {
            return (
                <div>
                    {MY_SKILLS.map((skill, index) => (
                        <div key={index}>
                            <div>{skill.title}</div>
                            {skill.skills.map((skill, index) => (
                                <div key={index}>{skill}</div>
                            ))}
                        </div>
                    ))}
                </div>
            );
        },
        CONTACT: () => {
            return (
                <div>
                    {CONTACT_INFORMATION.map((contact, index) => (
                        <div key={index}>
                            <div>{contact.title}</div>
                            <div>{contact.value}</div>
                        </div>
                    ))}
                </div>
            );
        },
        EXIT: () => {
            window.close();
        },
        CLEAR: () => {
            setHistory([]);
            setCommand("");
            setHistoryIndex(0);
            setCursor(0);
        },
    };

    const handleKeyDown = (e) => {
        if (e.key === "Enter") {
            e.preventDefault();
            setHistory([...history, command]);
            setCommand("");
            setHistoryIndex(history.length + 1);
            setCursor(0);
        }
        if (e.key === "ArrowUp") {
            e.preventDefault();
            if (historyIndex > 0) {
                setHistoryIndex(historyIndex - 1);
                setCommand(history[historyIndex - 1]);
            }
        }
        if (e.key === "ArrowDown") {
            e.preventDefault();
            if (historyIndex < history.length) {
                setHistoryIndex(historyIndex + 1);
                setCommand(history[historyIndex + 1]);
            }
        }
        if (e.key === "Tab") {
            e.preventDefault();
            setCommand(command + "    ");
        }
    };

    const handleChange = (e) => {
        setCommand(e.target.value);
        setCursor(e.target.selectionStart);
    };

    useEffect(() => {
        document.getElementById("command").selectionStart = cursor;
        document.getElementById("command").selectionEnd = cursor;
    }, [cursor]);

    useEffect(() => {
        document.getElementById("command").focus();
    }, []);

    useEffect(() => {
        document.getElementById("terminal").scrollTop =
            document.getElementById("terminal").scrollHeight;

        document.addEventListener("keydown", (e) => {
            if (e.ctrlKey && e.key === "c") {
                setHistory([...history, command]);
                setCommand("");
                setHistoryIndex(history.length + 1);
                setCursor(0);
            }
        });
    }, [history]);

    return (
        <div className=" w-full">
            <div className="flex flex-row justify-between bg-black text-white w-full h-8">
                <div className="flex flex-row">
                    <div className="bg-red-500 w-3 h-3 rounded-full m-1"></div>
                    <div className="bg-yellow-500 w-3 h-3 rounded-full m-1"></div>
                    <div className="bg-green-500 w-3 h-3 rounded-full m-1"></div>
                </div>
                <div className="flex flex-row">
                    <div className="bg-black w-3 h-3 rounded-full m-1"></div>
                    <div className="bg-black w-3 h-3 rounded-full m-1"></div>
                    <div className="bg-black w-3 h-3 rounded-full m-1"></div>
                </div>
            </div>
            <div className="flex flex-col mb-2">
                <p className="text-white text-lg">Rotari Stefan Portfolio [Version 1.0.0]</p>
                <p className="text-white text-lg">(c) Rotari Stefan. All rights reserved.</p>
            </div>
            <div id="terminal" className="bg-black text-white w-full">
                {history.map((command, index) => (
                    <div key={index} className="flex-col w-full">
                        <div className="flex flex-row">
                            <div className="text-green-500 text-lg">
                                guest@rotaristefan:~$
                            </div>
                            <div className="flex-grow">
                                <div className="text-white text-lg ml-2">
                                    {command}
                                </div>
                            </div>
                        </div>
                        <div className="flex flex-row w-full">
                            <div className="text-white text-lg w-full">
                                {COMMANDS[command.toUpperCase()]
                                    ? COMMANDS[command.toUpperCase()]()
                                    : "Command not found. Type HELP to see available commands."}
                            </div>
                        </div>
                    </div>
                ))}
                {/* terminal body input */}
                <div className="flex flex-col">
                    <div className="flex">
                        <div className="text-green-500 text-lg">
                            guest@rotaristefan:~$
                        </div>
                        <div className="flex-grow">
                            <form className="flex flex-row">
                                <input
                                    id="command"
                                    className="bg-black text-white text-lg ml-2 w-full focus:outline-none"
                                    value={command}
                                    onChange={handleChange}
                                    onKeyDown={handleKeyDown}
                                />
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Terminal;
